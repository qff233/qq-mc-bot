use base64::{engine::general_purpose, Engine as _};
use dns_lookup::lookup_host;
use json;
use proc_qq::{
    event, module, LoginEvent, MessageChainParseTrait, MessageSendToSourceTrait, Module,
};
use proc_qq::{re_exports::ricq::client::event::GroupMessageEvent, MessageChainAppendTrait};
use std::net::SocketAddr;
use tokio::io::{AsyncReadExt, AsyncWriteExt, BufReader};
use tokio::net::TcpStream;

pub fn module() -> Module {
    module!("ping", "ping", login, ping, mc_ping)
}

#[event]
async fn login(event: &LoginEvent) -> anyhow::Result<bool> {
    tracing::info!("正在登录 : {}", event.uin);
    Ok(false)
}

#[event(bot_command = "/ping")]
async fn ping(event: &GroupMessageEvent) -> anyhow::Result<bool> {
    event
        .send_message_to_source("hi~".parse_message_chain())
        .await?;
    Ok(true)
}

fn create_packet(packet_id: u32, data: &Vec<u8>) -> Vec<u8> {
    let pid = to_var_int(packet_id);
    let length = to_var_int((data.len() + pid.len()) as u32);

    let mut buf = length;
    for i in pid {
        buf.push(i);
    }

    for &i in data {
        buf.push(i);
    }

    return buf;
}

const SEGMENT_BITS: u32 = 0x7F;
const CONTINUE_BIT: u32 = 0x80;
async fn read_var_int(reader: &mut BufReader<&mut TcpStream>) -> Result<i32, std::io::Error> {
    let mut value: i32 = 0;
    let mut position: u32 = 0;
    let mut current_byte: u32;

    loop {
        current_byte = reader.read_u8().await? as u32;

        value |= ((current_byte & SEGMENT_BITS) << position) as i32;

        if (current_byte & CONTINUE_BIT) == 0 {
            break;
        }

        position += 7;
        if position > 32 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "position error",
            ));
        }
    }

    return Ok(value);
}

async fn read_string(reader: &mut BufReader<&mut TcpStream>) -> Result<String, std::io::Error> {
    let length = read_var_int(reader).await? as usize;

    let mut result: Vec<u8> = Vec::new();
    result.resize(length, 0);
    reader.read_exact(&mut result).await?;
    Ok(String::from_utf8(result).unwrap())
}

fn to_var_int(mut value: u32) -> Vec<u8> {
    let mut result: Vec<u8> = Vec::new();
    loop {
        if (value & !SEGMENT_BITS) == 0 {
            result.push(value as u8);
            return result;
        }

        result.push(((value & SEGMENT_BITS) | CONTINUE_BIT) as u8);
        value >>= 7;
    }
}

async fn api_mcping(host: &str) -> String {
    let host_port: Vec<&str> = host.split(':').collect();
    let port = match host_port.get(1) {
        Some(&port) => match port.parse::<u16>() {
            Ok(port) => port,
            Err(_) => {
                tracing::info!("port erro.");
                return String::from("port error.");
            }
        },
        None => 25565,
    };

    let ip = match lookup_host(host_port[0]) {
        Ok(ips) => {
            let mut ret_ip = ips[0];
            for ip in ips {
                if ip.is_ipv4() {
                    ret_ip = ip;
                    break;
                }
            }
            ret_ip
        }
        Err(_) => {
            tracing::info!("lookup host error.");
            return String::from("lookup host error.");
        }
    };

    let socket_addr = SocketAddr::new(ip, port);
    let mut stream = match TcpStream::connect(&socket_addr).await {
        Ok(stream) => stream,
        Err(_) => {
            tracing::info!("can't connect the server");
            return String::from("connet error.");
        }
    };

    let mut buffer: Vec<u8> = Vec::new();
    let mut add_buf = |buf: &[u8]| -> () {
        for &i in buf {
            buffer.push(i);
        }
    };
    let port_buf: Vec<u8> = vec![(port >> 8) as u8, (port & 0xFF) as u8];
    add_buf(&to_var_int(u32::MAX));
    add_buf(&to_var_int(host.len() as u32));
    add_buf(host_port[0].as_bytes());
    add_buf(&port_buf);
    add_buf(&to_var_int(1));

    if let Err(_) = stream.write(&create_packet(0x00, &buffer)).await {
        tracing::info!("send packet error!");
        return String::from("send packet error!");
    }

    if let Err(_) = stream.write(&create_packet(0x00, &Vec::new())).await {
        tracing::info!("send packet error!");
        return String::from("send packet error!");
    }

    let mut reader = BufReader::new(&mut stream);
    let _length = match read_var_int(&mut reader).await {
        Ok(len) => len,
        Err(e) => {
            tracing::info!("recv packet error!");
            return String::from(format!("recv packet error! {}", e.to_string()));
        }
    };

    let _pocket_id = match read_var_int(&mut reader).await {
        Ok(id) => id,
        Err(e) => {
            tracing::info!("recv packet error!");
            return String::from(format!("recv packet error! {}", e.to_string()));
        }
    };

    let data = match read_string(&mut reader).await {
        Ok(val) => val,
        Err(e) => {
            tracing::info!("recv packet error!");
            return String::from(format!("recv packet error! {}", e.to_string()));
        }
    };

    data
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn create_packet_test() {
        let data: Vec<u8> = vec![0x11];
        let buf = create_packet(0x00, &data);

        assert_eq!(buf, vec![2, 0, 17]);
        assert_eq!(to_var_int(4294967295), vec![255, 255, 255, 255, 15]);
    }

    #[test]
    // #[should_panic]
    fn recv_buf() {
        let buf;
        buf = tokio_test::block_on(api_mcping("3f.z4cs.com"));
        panic!("{}", buf);
    }

    #[test]
    fn base64_test() {
        let base = r"";
        let result = general_purpose::STANDARD.decode(base).unwrap();
        panic!("{:?}", result);
    }
}

#[event(bot_command = "/mcping {host}")]
async fn mc_ping(event: &GroupMessageEvent, host: String) -> anyhow::Result<bool> {
    tracing::info!("recv {}", host);
    let data = api_mcping(host.as_str()).await;
    let mut result = String::new();
    if let Some(str) = data.get(..1) {
        if str == "{" {
            let json_result = json::parse(&data).unwrap();
            let description = json_result["description"].to_string();
            if !description.is_empty() {
                result += format!("服务器介绍：{}\n", description).as_str();
            }

            let players = &json_result["players"];
            let players_max = players["max"].to_string();
            let players_online = players["online"].to_string();
            let players_sample = &players["sample"];
            let mut samples: Vec<(String, String)> = Vec::new();
            for i in 0.. {
                if players_sample[i].is_empty() {
                    break;
                }
                let sample = &players_sample[i];
                samples.push((sample["id"].to_string(), sample["name"].to_string()));
            }
            if !players_max.is_empty() && !players_online.is_empty() {
                result += format!("玩家在线人数：{}/{}\n", players_online, players_max).as_str();
            }
            if !samples.is_empty() {
                result += "玩家列表：\n";
                for i in samples {
                    result += format!("  {}\n", i.1).as_str();
                }
            }

            let version = &json_result["version"];
            let version_name = version["name"].to_string();
            if !version_name.is_empty() {
                result += format!("服务器版本：{}\n", version_name).as_str();
            }

            let mut img: Option<Vec<u8>> = None;
            let favicon = json_result["favicon"].to_string();
            if !favicon.is_empty() {
                let favicon = favicon.replace("\n", "");
                let index = favicon.find(",").unwrap();
                let favicon_base64 = &favicon[(index + 1)..];
                // panic!("{}", favicon_base64);
                let raw = general_purpose::STANDARD.decode(favicon_base64).unwrap();
                img = Some(raw);
            }

            match img {
                Some(img) => {
                    let img = event.upload_image_to_source(img).await?;
                    event
                        .send_message_to_source(result.parse_message_chain().append(img))
                        .await?;
                }
                None => {
                    event
                        .send_message_to_source(result.parse_message_chain())
                        .await?;
                }
            }
        } else {
            event
                .send_message_to_source(data.parse_message_chain())
                .await?;
        }
    }
    Ok(true)
}
